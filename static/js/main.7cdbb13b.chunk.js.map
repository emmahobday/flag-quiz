{"version":3,"sources":["Game.js","Intro.js","Results.js","App.js","reportWebVitals.js","index.js"],"names":["Game","countries","stage","updateStage","numCorrect","updateNumCorrect","useState","currentCountry","updateCurrentCountry","options","updateOptions","buttonOne","updateButtonOne","buttonTwo","updateButtonTwo","buttonThree","updateButtonThree","questionsAsked","updateQuestionsAsked","selectRandom","rando","Math","floor","random","length","checkAnswer","event","guess","target","outerText","name","className","includes","setTimeout","useEffect","loptions","array","temporaryValue","randomIndex","currentIndex","shuffle","getOptions","src","flag","onClick","Intro","Results","message","App","updateCountries","fetch","then","resp","json","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cdbb13b.chunk.js","sourcesContent":["import './App.css'\nimport React, { useState, useEffect } from 'react'\n\nexport default function Game({ countries, stage, updateStage, numCorrect, updateNumCorrect }) {\n  let [currentCountry, updateCurrentCountry] = useState({})\n  let [options, updateOptions] = useState(['', '', ''])\n  // let options = ['', '', '']\n  let [buttonOne, updateButtonOne] = useState('plain')\n  let [buttonTwo, updateButtonTwo] = useState('plain')\n  let [buttonThree, updateButtonThree] = useState('plain')\n  let [questionsAsked, updateQuestionsAsked] = useState(1)\n  \n\n\n  useEffect(() => {\n    selectRandom()\n  }, [])\n\n  useEffect(() => {\n    getOptions()\n  }, [currentCountry])\n\n  function selectRandom() {\n    const rando = countries[Math.floor(Math.random() * countries.length)]\n    updateCurrentCountry(rando)\n  }\n\n  function shuffle(array) {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  function getOptions() {\n    let loptions = ['', '', '']\n    loptions[0] = currentCountry.name\n    loptions[1] = countries[Math.floor(Math.random() * countries.length)].name\n    loptions[2] = countries[Math.floor(Math.random() * countries.length)].name\n    updateOptions(shuffle(loptions))\n  }\n\n  function checkAnswer(event) {\n    let guess = event.target.outerText\n    if (buttonOne !== 'plain' || buttonTwo !== 'plain' || buttonThree !== 'plain') {\n      return\n    }\n\n    if (guess === currentCountry.name) {\n      if (event.target.className.includes('choice1')) {\n        updateButtonOne('true')\n        setTimeout(() => {\n          updateButtonOne('plain')\n        }, 1000)\n      } else if (event.target.className.includes('choice2')) {\n        updateButtonTwo('true')\n        setTimeout(() => {\n          updateButtonTwo('plain')\n        }, 1000)\n      } else {\n        updateButtonThree('true')\n        setTimeout(() => {\n          updateButtonThree('plain')\n        }, 1000)\n      }\n      setTimeout(() => {\n        updateNumCorrect(numCorrect + 1)\n      }, 1000)\n    } else {\n      if (event.target.className.includes('choice1')) {\n        updateButtonOne('false')\n        setTimeout(() => {\n          updateButtonOne('plain')\n        }, 1000)\n      } else if (event.target.className.includes('choice2')) {\n        updateButtonTwo('false')\n        setTimeout(() => {\n          updateButtonTwo('plain')\n        }, 1000)\n      } else {\n        updateButtonThree('false')\n        setTimeout(() => {\n          updateButtonThree('plain')\n        }, 1000)\n      }\n    }\n    setTimeout(() => {\n      if (questionsAsked === 15) {\n        updateStage(stage + 1)\n      }\n      updateQuestionsAsked(questionsAsked + 1)\n      selectRandom()\n    }, 1000)\n\n  }\n\n  return <>\n    <div className=\"gameArea gameInPlay\">\n      <div className=\"gameQ\">\n        <div className=\"score\"></div>\n        <p className=\"q\">This is the national flag of...</p>\n        <div className=\"score\">\n          <p className=\"small\">Question {questionsAsked} of 15</p>\n          <p className=\"small\">Correct: {numCorrect}</p>\n        </div>\n        {/* <p>{numCorrect} / {15}</p> */}\n      </div>\n      <div className=\"gameboard\">\n        <div className=\"gameFlag\"><img className=\"flag\" src={currentCountry.flag}></img></div>\n        <div className=\"gameChoices\">\n          <button className={buttonOne + \" choice choice1\"} onClick={checkAnswer}>{options[0]}</button>\n          <button className={buttonTwo + \" choice choice2\"} onClick={checkAnswer}>{options[1]}</button>\n          <button className={buttonThree + \" choice choice3\"} onClick={checkAnswer}>{options[2]}</button>\n        </div>\n      </div>\n    </div>\n  </>\n}","import './App.css'\n\nexport default function Intro({ stage, updateStage }) {\n\n  function proceed() {\n    updateStage(stage + 1)\n  }\n  return <>\n    <div className=\"gameArea\">\n      <h3>Ready to test your knowledge of flags?</h3>\n      {/* <h3>Click below to play:</h3> */}\n      <button className=\"startButton\" onClick={proceed}>Play now!</button>\n    </div>\n    \n  </>\n}","import './App.css'\nimport React, { useState, useEffect } from 'react'\n\nexport default function Results({ stage, updateStage, numCorrect, updateNumCorrect }) {\n\n  function reset() {\n    updateNumCorrect(0)\n    updateStage(1)\n  }\n\n  let message = ''\n\n  if (numCorrect === 15) {\n    message = 'A perfect score!'\n  } else if (numCorrect > 9) {\n    message = 'Not bad!'\n  } else if (numCorrect > 5) {\n    message = 'Keep practicing!'\n  } else {\n    message = 'Ouch. More practice needed!'\n  }\n\n  return <>\n    <div className=\"gameArea\">\n      <h2>You scored {numCorrect} out of 15!</h2>\n      <h3>{message}</h3>\n      <button className=\"startButton\" onClick={reset}>Play again?</button>\n    </div>\n\n  </>\n}","// import logo from './logo.svg';\nimport './App.css';\nimport Game from './Game'\nimport Intro from './Intro'\nimport React, { useState, useEffect } from 'react'\nimport Results from './Results'\n\nfunction App() {\n  let [stage, updateStage] = useState(0)\n  let [countries, updateCountries] = useState([])\n  let [numCorrect, updateNumCorrect] = useState(0)\n\n  useEffect(() => {\n    fetch('https://restcountries.eu/rest/v2/all')\n      .then(resp => resp.json())\n      .then(data => {\n        updateCountries(data)\n      })\n    \n  }, [])\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Name that flag!\n        </h1>\n        {stage === 0 ? <Intro stage={stage} updateStage={updateStage} /> : stage === 1 ? <Game countries={countries} stage={stage} updateStage={updateStage} numCorrect={numCorrect} updateNumCorrect={updateNumCorrect} /> : <Results stage={stage} updateStage={updateStage} numCorrect={numCorrect} updateNumCorrect={updateNumCorrect} />}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}